name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.1)'
        required: true
        default: 'v1.0.1'

permissions:
  contents: write
  
jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: main/package-lock.json
          
      - name: Install dependencies
        working-directory: ./main
        run: npm install
        
      - name: Build app (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: ./main
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx electron-builder --win --publish always
        
      - name: Build app (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: ./main
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx electron-builder --mac dmg --publish always
        
      - name: Build app (Linux)
        if: matrix.os == 'ubuntu-latest'
        working-directory: ./main
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx electron-builder --linux AppImage --publish always
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: main/dist/
          retention-days: 7

  publish-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Publish Release
        uses: actions/github-script@v7
        with:
          script: |
            const tag = context.ref.replace('refs/tags/', '');
            
            // Get the draft release
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const draftRelease = releases.data.find(release => 
              release.tag_name === tag && release.draft === true
            );
            
            if (draftRelease) {
              // Publish the draft release
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: draftRelease.id,
                draft: false
              });
              console.log(`Published release ${tag}`);
            } else {
              console.log(`No draft release found for tag ${tag}`);
            }
